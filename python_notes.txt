## Python内存管理
1. 对象引用计数
* sys.getrefcount(a) 得到一个整数，即对象的引用数。所有的对象都有引用计数。
* 引用计数增加：
	* 给对象增加新引用名称 
	* 增加对象到容器中
* 引用计数减少：
	* del 删除引用别名 
	* 引用超出作用域或者别名引用重新赋值

由于Python解释器内部的一些处理逻辑存在，每个对象还有其他未被程序员看到的引用，所以引
用计数比我们想象的多很多。所以我认为del语句的使用场景并不多，大多数时候通过作用域控制就可以使我们定义的应用消除，而del也不能使对象的引用数归零，从而被垃圾回收。

2. 垃圾回收
* 当对象的引用计数为0时，垃圾回收器会在某个适当的时机回收该对象。
* 当两个对象a和b相互引用时，del语句可以减少a和b的引用计数，并销毁用于引用底层对象的名称a和b。但是每个对象本身还存在着对另一个对象的引用，因此引用计数不会归零。因此Python计时器会定期执行一个循环检测，扫描循环引用的不可触及对象，并且清除。
	
3. 内存池
* Pymalloc机制：为提高程序效率，Python引入内存池机制，用于管理对小块内存的管理和释放。
* 所有小于256个字节的对象都使用pymalloc分配内存，而大的对象则用系统的malloc。
* 对于整数，浮点数和List，有独立的私有内存池，对象间不共享他们的内存池。比如说你分配了很多内存给整数对象，然后又释放了这些对象的内存，这些内存是不会分配给浮点数的。